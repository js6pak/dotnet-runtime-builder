name: Build

on: push

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: true

env:
  DOTNET_RUNTIME_TAG: "v9.0.1"
  COMMON_BUILD_ARGS: "-ci -c Release /p:OfficialBuild=true /p:PreReleaseVersionLabel=bepinex /p:PreReleaseVersionIteration=${{ github.run_number }} /p:StabilizePackageVersion=false /p:VersionSuffixDateStamp= /p:_PatchNumber="

jobs:
  # build-coreclr:
  #   runs-on: ${{ matrix.os }}
  #   container:
  #     image: ${{ matrix.os == 'ubuntu-latest' && format('mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-net9.0-cross-{0}', (matrix.arch == 'x64' && 'amd64' || matrix.arch)) || '' }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, windows-latest, macos-latest]
  #       arch: [x64, arm64]
  #       include:
  #         - os: windows-latest
  #           arch: x86

  #   steps:
  #     - id: set-vars
  #       uses: actions/github-script@v7
  #       with:
  #         script: |
  #           const os = "${{ matrix.os }}";
  #           const arch = "${{ matrix.arch }}";

  #           switch (os.split("-")[0]) {
  #             case "ubuntu":
  #               core.setOutput("rid", "linux-" + arch);
  #               core.setOutput("build-cmd", "./build.sh");
  #               core.exportVariable("ROOTFS_DIR", "/crossrootfs/" + arch);
  #               break;

  #             case "windows":
  #               core.setOutput("rid", "win-" + arch);
  #               core.setOutput("build-cmd", ".\\build.cmd");
  #               break;

  #             case "macos":
  #               core.setOutput("rid", "osx-" + arch);
  #               core.setOutput("build-cmd", "./build.sh");
  #               break;
  #           }

  #     - run: git config --system core.longpaths true
  #     - run: git config --global --add safe.directory '*'

  #     - uses: actions/checkout@v4
  #       with:
  #         repository: "dotnet/runtime"
  #         ref: ${{ env.DOTNET_RUNTIME_TAG }}

  #     - uses: actions/checkout@v4
  #       with:
  #         path: builder

  #     - name: Apply patches
  #       shell: bash
  #       run: git apply builder/patches/*.patch

  #     - name: Build
  #       run: |
  #         ${{ steps.set-vars.outputs.build-cmd }} ${{ env.COMMON_BUILD_ARGS }} -cross -a ${{ matrix.arch }} -s clr+libs+packs.product

  #     - shell: bash
  #       run: |
  #         mkdir -p ./result
  #         cp ./artifacts/packages/Release/Shipping/Microsoft.NETCore.App.Runtime.${{ steps.set-vars.outputs.rid }}.*.symbols.nupkg ./result

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: coreclr-${{ steps.set-vars.outputs.rid }}
  #         path: ./result

  build-mono-android:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-net9.0-cross-android-amd64
    strategy:
      fail-fast: false
      matrix:
        arch: [arm64, arm, x64, x86]

    steps:
      - run: git config --global --add safe.directory '*'

      - uses: actions/checkout@v4
        with:
          repository: "dotnet/runtime"
          ref: ${{ env.DOTNET_RUNTIME_TAG }}

      - uses: actions/checkout@v4
        with:
          path: builder

      - name: Apply patches
        shell: bash
        run: git apply builder/patches/*.patch

      - name: Build
        run: ./build.sh ${{ env.COMMON_BUILD_ARGS }} -os android -arch ${{ matrix.arch }} -s mono+libs+packs.product /p:MonoLibClang=/usr/local/lib/libclang.so

      - run: |
          mkdir -p ./result
          cp ./artifacts/packages/Release/Shipping/Microsoft.NETCore.App.Runtime.Mono.android-${{ matrix.arch }}.*.symbols.nupkg ./result

      - uses: actions/upload-artifact@v4
        with:
          name: mono-android-${{ matrix.arch }}
          path: ./result

  create_release:
    needs:
      # - build-coreclr
      - build-mono-android
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Collect files
        run: |
          mkdir release
          cd artifacts
          for i in */; do (cd "${i%/}" && zip -0 -r "../../release/${i%/}.zip" *) & done; wait

      - name: Create release
        uses: marvinpinto/action-automatic-releases@e28f6161c2a80b613d05f8cd6b6bad2d5f7a1ea4
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: true
          automatic_release_tag: "${{ env.DOTNET_RUNTIME_TAG }}-bepinex.${{ github.run_number }}"
          files: |
            release/*.zip
